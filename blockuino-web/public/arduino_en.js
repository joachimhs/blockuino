goog.provide('Blockly.Msg.en');

goog.require('Blockly.Msg');

Blockly.Msg.ARDUINO_BLINK_PIN = "Blink LED connected to Pin: ";
Blockly.Msg.ARDUINO_BLINK_TIMES = "times per second";
Blockly.Msg.ARDUINO_BLINK_TOOLTIP = "Use this block to blink the LED connected to the selected port from 1 to 10 times per second.";

Blockly.Msg.ARDUINO_PINMODE_DEFINE = "Define Pin: ";
Blockly.Msg.ARDUINO_PINMODE_AS = "as: ";
Blockly.Msg.ARDUINO_PINMODE_TOOLTIP = "Use this block to define a pin as either INPUT of OUTPUT.";

Blockly.Msg.ARDUINO_DIGITAL_WRITE_DEFINE = "Set Pin: ";
Blockly.Msg.ARDUINO_TO = "to: ";
Blockly.Msg.ARDUINO_DIGITAL_WRITE_TOOLTIP = "Use this block to turn the voltage on or off for a Pin.";

Blockly.Msg.ARDUINO_DIGITAL_READ_DEFINE = "Read from Digital Pin: ";
Blockly.Msg.ARDUINO_DIGITAL_READ_TOOLTIP = "Use this block to read either HIGH or LOW from a digital Pin.";

Blockly.Msg.ARDUINO_ANALOG_READ_DEFINE = "Read from Analog Pin: ";
Blockly.Msg.ARDUINO_ANALOG_READ_TOOLTIP = "Use this block to read a value from 0 to 1013 from an analog Pin.";

Blockly.Msg.ARDUINO_SETUP_DEFINE = "Setup";
Blockly.Msg.ARDUINO_SETUP_TOOLTIP = "This block defines the setup function where you will tell the Arduino which Pins you wish to use.";

Blockly.Msg.ARDUINO_ANALOG_WRITE_PIN = "Write to Pin (PWM): ";
Blockly.Msg.ARDUINO_ANALOG_WRITE_VALUE = "with value: ";
Blockly.Msg.ARDUINO_ANALOG_WRITE_TOOLTIP = "Use this block to write a puls width modulated value (from 0 to 255) to a digital pin, marked with Tilde (~).";

Blockly.Msg.ARDUINO_LOOP_DEFINE = "loop";
Blockly.Msg.ARDUINO_LOOP_TOOLTIP = "This block defines your main Arduino program. The arduon will repeat all instructions contained within the loop function as fast as it can.";

Blockly.Msg.ARDUINO_DELAY_DEFINE = "Wait for: ";
Blockly.Msg.ARDUINO_DELAY_MS = "milliseconds";
Blockly.Msg.ARDUINO_DELAY_TOOLTIP = "Use this block to get the Arduino to wait a little before it continues with the next block.";

Blockly.Msg.ARDUINO_DECLARE_VARIABLE_DEFINE = "Create new variable named: ";
Blockly.Msg.ARDUINO_DECLARE_VARIABLE_TYPE = "with type: ";
Blockly.Msg.ARDUINO_DECLARE_VARIABLE_VALUE = "and value: ";
Blockly.Msg.ARDUINO_DECLARE_VARIABLE_TOOLTIP = "Use this block to define a new variable in your program.";

Blockly.Msg.ARDUINO_SET_VARIABLE_DEFINE = "Give the variable: ";
Blockly.Msg.ARDUINO_SET_VARIABLE_VALUE = "the value: ";
Blockly.Msg.ARDUINO_SET_VARIABLE_TOOLTIP = "Use this block to assign (give) a variable a new value.";

Blockly.Msg.ARDUINO_VARIABLE_DEFINE = "Variable: ";
Blockly.Msg.ARDUINO_VARIABLE_TOOLTIP = "Use this block in order to use one of your variables.";

Blockly.Msg.ARDUINO_DIGITAL_PIN = "Digital Pin: ";
Blockly.Msg.ARDUINO_DIGITAL_PIN_TOOLTIP = "Use this block to select one of the digital Pins.";

Blockly.Msg.ARDUINO_ANALOG_PIN = "Analog Pin: ";
Blockly.Msg.ARDUINO_ANALOG_PIN_TOOLTIP = "Use this block to select one of the analogPins.";

Blockly.Msg.ARDUINO_VARIABLE_VALUE = "Value: ";
Blockly.Msg.ARDUINO_VARIABLE_VALUE_TOOLTIP = "Use this block to create a value.";

Blockly.Msg.ARDUINO_DECLARE_FUNCTION_VALUE = "New function: ";
Blockly.Msg.ARDUINO_DECLARE_FUNCTION_RETURNS = "which returns: ";
Blockly.Msg.ARDUINO_DECLARE_FUNCTION_TOOLTIP = "Use this block to create a new function.";

Blockly.Msg.ARDUINO_FUNCTION_RETURN_LABEL = "Returner";
Blockly.Msg.ARDUINO_FUNCTION_RETURN_TOOLTIP = "Use this block to return a value from a function";

Blockly.Msg.ARDUINO_USE_FUNCTION_VALUE = "Function: ";
Blockly.Msg.ARDUINO_USE_FUNCTION_TOOLTIP = "Use this block to use one of the functions you've created.";

Blockly.Msg.ARDUINO_FOR_DECLARE = "Repeat from: ";
Blockly.Msg.ARDUINO_FOR_VARIABLE_NAME = "With variable: ";

Blockly.Msg.ARDUINO_USE_FUNCTION_TOOLTIP = "Use this block to repeat the code contained inside it the specified number of times.";

Blockly.Msg.ARDUINO_REPEAT_DECLARE = "Repeat: ";
Blockly.Msg.ARDUINO_REPEAT_TIMES = "times";
Blockly.Msg.ARDUINO_REPEAT_TOOLTIP = "Use this block to repeat the code contained inside it the specified number of times.";

Blockly.Msg.ARDUINO_HIGH = "On";
Blockly.Msg.ARDUINO_LOW = "Off";
Blockly.Msg.ARDUINO_HIGH_LOW_TOOLTIP = "Use this block to define a Pin as On (HIGH) or Off (LOW).";

Blockly.Msg.ARDUINO_LED_STRIP_INCLUDE = "Include the Pixel library";
Blockly.Msg.ARDUINO_LED_STRIP_INCLUDE_TOOPTIP = "Use this block to include the Pixel library. Use at the very top of your program.";

Blockly.Msg.ARDUINO_LED_STRIP_DECLARE = "Define LED stip with";
Blockly.Msg.ARDUINO_LED_STRIP_NUM_PIXELS = "number of pixels:";
Blockly.Msg.ARDUINO_LED_STRIP_PIN = "connected to Pin: ";
Blockly.Msg.ARDUINO_LED_STRIP_TYPE = "LED type:";
Blockly.Msg.ARDUINO_LED_STRIP_TOOLTIP = "Use this block to define a LED Pixel strip or string.";

Blockly.Msg.ARDUINO_LED_STRIP_BEGIN = "Setup Pixels";
Blockly.Msg.ARDUINO_LED_STRIP_BEGIN_TOOLTIP = "Use this block to setup the Pixel string inside of the setup function.";

Blockly.Msg.ARDUINO_LED_STRIP_SHOW = "Update Pixels";
Blockly.Msg.ARDUINO_LED_STRIP_BEGIN_TOOLTIP = "Use this block to update the pixels with new colors.";

Blockly.Msg.ARDUINO_LED_STRIP_COLOR_DECLARE = "Set Pixel Color for Pixel:";
Blockly.Msg.ARDUINO_LED_STRIP_COLOR_RED = "Red:";
Blockly.Msg.ARDUINO_LED_STRIP_COLOR_GREEN = "Green:";
Blockly.Msg.ARDUINO_LED_STRIP_COLOR_BLUE = "Blue:";
Blockly.Msg.ARDUINO_LED_STRIP_COLOR_TOOLTIP = "UYse this block to set the color of one pixel.";

Blockly.Msg.ARDUINO_COMMENT_DEFINE = "Add a comment:";
Blockly.Msg.ARDUINO_COMMENT_TOOLTIP = 'Use this block to add a comment to your code';
Blockly.Msg.ARDUINO_COMMENT_LABEL = "Comment: ";
//
// Default Blockly lang
//

// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.en');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Add Comment";
Blockly.Msg.AUTH = "Please authorize this app to enable your work to be saved and to allow it to be shared by you.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Change value:";
Blockly.Msg.CHAT = "Chat with your collaborator by typing in this box!";
Blockly.Msg.CLEAN_UP = "Clean up Blocks";
Blockly.Msg.COLLAPSE_ALL = "Collapse Blocks";
Blockly.Msg.COLLAPSE_BLOCK = "Collapse Block";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colour 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colour 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
Blockly.Msg.COLOUR_BLEND_TITLE = "blend";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "random colour";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
Blockly.Msg.COLOUR_RGB_BLUE = "blue";
Blockly.Msg.COLOUR_RGB_GREEN = "green";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "red";
Blockly.Msg.COLOUR_RGB_TITLE = "colour with";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg.CONTROLS_FOREACH_TITLE = "for each item %1 in list %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg.CONTROLS_FOR_TITLE = "count with %1 from %2 to %3 by %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "else";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "else if";
Blockly.Msg.CONTROLS_IF_MSG_IF = "if";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeat %1 times";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";
Blockly.Msg.DELETE_BLOCK = "Delete Block";
Blockly.Msg.DELETE_X_BLOCKS = "Delete %1 Blocks";
Blockly.Msg.DISABLE_BLOCK = "Disable Block";
Blockly.Msg.DUPLICATE_BLOCK = "Duplicate";
Blockly.Msg.ENABLE_BLOCK = "Enable Block";
Blockly.Msg.EXPAND_ALL = "Expand Blocks";
Blockly.Msg.EXPAND_BLOCK = "Expand Block";
Blockly.Msg.EXTERNAL_INPUTS = "External Inputs";
Blockly.Msg.HELP = "Help";
Blockly.Msg.INLINE_INPUTS = "Inline Inputs";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty list";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "create list with";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "first";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# from end";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "get";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
Blockly.Msg.LISTS_GET_INDEX_LAST = "last";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "random";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remove";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "Returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "Returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "Removes and returns the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "Removes and returns the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "Removes the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "Removes the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "to last";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns 0 if item is not found.";
Blockly.Msg.LISTS_INLIST = "in list";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Returns true if the list is empty.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg.LISTS_LENGTH_TITLE = "length of %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "as";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insert at";
Blockly.Msg.LISTS_SET_INDEX_SET = "set";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Inserts the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Inserts the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "Sets the item at the specified position in a list. #1 is the last item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "Sets the item at the specified position in a list. #1 is the first item.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "true";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "not %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Returns null.";
Blockly.Msg.LOGIC_OPERATION_AND = "and";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg.LOGIC_OPERATION_OR = "or";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "if false";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "if true";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_TITLE = "change %1 by %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by";
Blockly.Msg.MATH_IS_EVEN = "is even";
Blockly.Msg.MATH_IS_NEGATIVE = "is negative";
Blockly.Msg.MATH_IS_ODD = "is odd";
Blockly.Msg.MATH_IS_POSITIVE = "is positive";
Blockly.Msg.MATH_IS_PRIME = "is prime";
Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg.MATH_IS_WHOLE = "is whole";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "remainder of %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "A number.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "round";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "round down";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "round up";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "square root";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Return 10 to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
Blockly.Msg.ME = "Me";
Blockly.Msg.NEW_VARIABLE = "New variable...";
Blockly.Msg.NEW_VARIABLE_TITLE = "New variable name:";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Create '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "do something";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "to";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "return";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "input name:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "inputs";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";
Blockly.Msg.REMOVE_COMMENT = "Remove Comment";
Blockly.Msg.RENAME_VARIABLE = "Rename variable...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Rename all '%1' variables to:";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "append text";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "to";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of the first text in the second text. Returns 0 if text is not found.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "print %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg.TODAY = "Today";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";
Blockly.Msg.VARIABLES_SET = "set %1 to %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;

Blockly.Msg.ARDUINO_SERIAL_BEGIN = "Start Serial communication";
Blockly.Msg.ARDUINO_SERIAL_YES = "Yes";
Blockly.Msg.ARDUINO_SERIAL_NO = "No";
Blockly.Msg.ARDUINO_SERIAL_NEW_LINE = "New Line: ";
Blockly.Msg.ARDUINO_SERIAL_PRINT = "Serial print: ";
Blockly.Msg.ARDUINO_MAP_DECLARE = "Map from";
Blockly.Msg.ARDUINO_MAP_VARIABLE = "Variable: ";
Blockly.Msg.ARDUINO_MAP_MIN_FROM = "From Minimum";
Blockly.Msg.ARDUINO_MAP_MAX_FROM = "From Maximum ";
Blockly.Msg.ARDUINO_MAP_MIN_TO = "To Minimum";
Blockly.Msg.ARDUINO_MAP_MAX_TO = "To Maximum";
Blockly.Msg.ARDUINO_TONE_MS_DECLARE = "Play Tone";
Blockly.Msg.ARDUINO_TONE_MS_PIN = "From Pin: ";
Blockly.Msg.ARDUINO_TONE_MS_FREQ = "with frequency:";
Blockly.Msg.ARDUINO_TONE_MS_IN = "In: ";
Blockly.Msg.ARDUINO_TONE_MS_MS = "ms";
Blockly.Msg.ARDUINO_TONE_MS_TOOLTIP = "Use this block to play a tone with the given frequency and length.";
Blockly.Msg.ARDUINO_NO_TONE_TOOLTIP = "Bruk denne klossen for å avslutte tonen fra pinnen angitt";
Blockly.Msg.ARDUINO_NO_TONE_MS_DECLARE = "Avslutt tone";
Blockly.Msg.ARDUINO_RANDOM = "Random number";
Blockly.Msg.ARDUINO_RANDOM_FROM = "From";
Blockly.Msg.ARDUINO_RANDOM_TO = "To";
Blockly.Msg.ARDUINO_RANDOM_TOOLTIP = "Use this block to generate a random number between min and max";
Blockly.Msg.MOTOR_INIT = "Initialize L293/L298";
Blockly.Msg.MOTOR_INIT_SPEED = "Speed (0-255)";
Blockly.Msg.MOTOR_INIT_TOOLTIP = "Use this block to specify which ports the motor controllers input is connected to";
Blockly.Msg.MOTOR_SETUP = "L293/L298 Setup";
Blockly.Msg.MOTOR_SETUP_TOOLTIP = "Use this block to specyfy the pinMode to the motor controllers connections";
Blockly.Msg.MOTOR_STOP = "Stop";
Blockly.Msg.MOTOR_STOP_TOOLTIP = "Use this block to stop the motors";
Blockly.Msg.MOTOR_FORWARDS = "Go Forwards";
Blockly.Msg.MOTOR_FORWARDS_TOOLTIP = "Use this block to make the car go forwards";
Blockly.Msg.MOTOR_BACKWARDS = "Go Bakwards";
Blockly.Msg.MOTOR_BACKARDS_TOOLTIP = "Use this block to make the car go backwards";
Blockly.Msg.MOTOR_ROTATE_RIGHT = "Rotate right";
Blockly.Msg.MOTOR_ROTATE_RIGHT_TOOLTIP = "Use this block to rotate to the right";
Blockly.Msg.MOTOR_ROTATE_LEFT = "Rotate left";
Blockly.Msg.MOTOR_ROTATE_LEFT_TOOLTIP = "Use this block to rotate to the left";
Blockly.Msg.MOTOR_SPEED = "Set the motors speed";
Blockly.Msg.MOTOR_SPEED_TOOLTIP = "USe this block to set the speed of the motors. Values can be from -255 to 255";
Blockly.Msg.MOTOR_LEFT = "Left Side";
Blockly.Msg.MOTOR_RIGHT = "Right Side";
Blockly.Msg.ULTRASONIC_INITIALIZE_INIT = "Initialize Ultrasonisk Sensor";
Blockly.Msg.ULTRASONIC_INITIALIZE_TOOLTIP = "Use this block to define which ports the ultrasonic sensor is connected to";
Blockly.Msg.ULTRASONIC_SETUP = "Ultrasonic sensor setup";
Blockly.Msg.ULTRASONIC_SETUP_TOOLTIP = "Use this block to define the pinModes for the pins";
Blockly.Msg.ULTRASONIC_DISTANCE = "Read Ultrasonic distance (cm)";
Blockly.Msg.ULTRASONIC_DISTANCE_TOOLTIP = "Use this block to read the distance in cm";
Blockly.Msg.SERVO_INCLUDE = "Include the Servo library";
Blockly.Msg.SERVO_INCLUDE_TOOLTIP = "Use this block to add the Servo library";
Blockly.Msg.SERVO_ATTACH = "Connect Servo";
Blockly.Msg.SERVO_ATTACH_TOOLTIP = "Use this block to connect the servo-variable to an Arduino port";
Blockly.Msg.SERVO_ATTACH_TO_PIN = "To Port";
Blockly.Msg.SERVO_WRITE = "Write to Servo:";
Blockly.Msg.SERVO_WRITE_TOOLTIP = "Use this block to set the angle of the servo motor";
Blockly.Msg.OLED_INCLUDE = "Include OLED libraries";
Blockly.Msg.OLED_INCLUDE_TOOLTIP = "Use this block to include the libraries SPI, Wire, Adafruit_GFX og Adafruit_SSD1306.";
Blockly.Msg.OLED_SETUP = "Setup OLED Display";
Blockly.Msg.OLED_SETUP_TOOLTIP = "Use this bock to include the code needed in setup()";
Blockly.Msg.OLED_DRAW_PIXEL = "Draw Pixel";
Blockly.Msg.OLED_DRAW_PIXEL_TOOLTIP = "Use this block to draw a single pixel at x and y";
Blockly.Msg.OLED_SET_CURSOR = "Set OLED Cursor to";
Blockly.Msg.OLED_SET_CURSOR_TOOLTIP = "Use this block to set the cursor to x- and y-coordiantes";
Blockly.Msg.OLED_PRINT = "Write Tekst on OLED:";
Blockly.Msg.OLED_PRINT_TOOLTIP = "Use this block to write text to the OLED display at the location of the cursor";
Blockly.Msg.OLED_UPDATE_DISPLAY = "Update Display";
Blockly.Msg.OLED_UPDATE_DISPLAY_TOOLTIP = "Use this block to update the OLED display";
Blockly.Msg.OLED_CLEAR_DISPLAY = "Empty Display";
Blockly.Msg.OLED_CLEAR_DISPLAY_TOOLTIP = "Use this block to empty the OLED display";
Blockly.Msg.EEPROM_READ= "Read from EEPROM";
Blockly.Msg.EEPROM_READ_ADDRESS = "Address:";
Blockly.Msg.EEPROM_READ_TOOLTIP= "Use this block to read a value from the EEPROM address specified";
Blockly.Msg.EEPROM_LENGTH= "EEPROM Size";
Blockly.Msg.EEPROM_LENGTH_TOOLTIP= "Use this block to find the size of the EEPROM memory";
Blockly.Msg.DHT_INIT = "Initialize the DHT library";
Blockly.Msg.DHT_INIT_PORT = "DHT Port";
Blockly.Msg.DHT_INIT_TOOLTIP = "Use this block to initialize the DHT11/22 library";
Blockly.Msg.DHT_SETUP = "DHT Setup";
Blockly.Msg.DHT_SETUP_TOOLTIP = "Use this block to start the sensor inside setup()";
Blockly.Msg.DHT_TEMP = "Read Temperatur (C)";
Blockly.Msg.DHT_TEMP_TOOLTIP = "Use this block to read the temperature in Celsium (float)";
Blockly.Msg.DHT_HUMIDITY = "Read humidity";
Blockly.Msg.DHT_HUMIDITY_TOOLTIP = "Use this block to read the humidity (float)";
Blockly.Msg.ARDUINO_RAW_THERMISTOR_FUNCTION = "Estimate the Thermistor Temperature Funciton";
Blockly.Msg.ARDUINO_RAW_THERMISTOR_FUNCTION_TOOLTIP = "Use this block to add a function to estimate the Thermistor temperature";
Blockly.Msg.ARDUINO_RAW_THERMISTOR_TEMP = "Get Thermistor Temp";
Blockly.Msg.ARDUINO_RAW_THERMISTOR_TEMP_INVERT = "Invert Analog Input Value";
Blockly.Msg.ARDUINO_RAW_THERMISTOR_TEMP_VALUE = "Analog Input Value";
Blockly.Msg.ARDUINO_RAW_THERMISTOR_TEMP_TOOLTIP = "Use this block to estimate the temperature from a Thermistor";

Blockly.Msg.EEPROM_INCLUDE= "Include the EEPROM library";
Blockly.Msg.EEPROM_INCLUDE_TOOLTIP = "Use this block to include the EEPROM library";
Blockly.Msg.EEPROM_WRITE= "Store to EEPROM";
Blockly.Msg.EEPROM_WRITE_ADDRESS = "Address:";
Blockly.Msg.EEPROM_WRITE_VALUE = "value:";
Blockly.Msg.EEPROM_WRITE_TOOLTIP= "Use this block to write a value to a EEPROM address";
Blockly.Msg.EEPROM_UPDATE= "Update EEPROM value";
Blockly.Msg.EEPROM_WRITE_ADDRESS = "Address:";
Blockly.Msg.EEPROM_WRITE_VALUE = "Value:";
Blockly.Msg.EEPROM_UPDATE_TOOLTIP= "Use this block to update the value of a EEPROM address";
